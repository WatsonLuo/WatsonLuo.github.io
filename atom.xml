<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>罗小芮的发家之路</title>
  
  <subtitle>总有一天我也会变成大佬的！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/"/>
  <updated>2019-05-31T08:26:24.962Z</updated>
  <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/</id>
  
  <author>
    <name>WatsonLuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件工程</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/</id>
    <published>2019-05-30T14:17:36.000Z</published>
    <updated>2019-05-31T08:26:24.962Z</updated>
    
    <content type="html"><![CDATA[<p>总目录：</p><ul><li>软件工程学概论（4学时）</li><li>可行性研究（4学时）</li><li>需求分析（4学时）</li><li>总体设计（6学时）</li><li>详细设计（4学时）</li><li>实现（6学时）</li><li>维护（2学时）</li><li>软件项目管理（6学时）<a id="more"></a></li></ul><h1 id="一、软件工程学概述（4）"><a href="#一、软件工程学概述（4）" class="headerlink" title="一、软件工程学概述（4）"></a><strong>一、软件工程学概述（4）</strong></h1><h2 id="学习重点："><a href="#学习重点：" class="headerlink" title="学习重点："></a>学习重点：</h2><ol><li>软件危机、软件工程产生的原因</li><li>软件工程过程和软件生命周期</li><li>软件生命周期模型</li></ol><h2 id="掌握几个基本概念："><a href="#掌握几个基本概念：" class="headerlink" title="掌握几个基本概念："></a>掌握几个基本概念：</h2><ol><li>软件危机</li><li>软件工程</li><li>软件过程</li><li>软件生命周期</li><li>软件生命周期模型</li></ol><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><ul><li>软件危机定义：软件危机指在计算机软件的开发和维护过程中，所遇到的一系列严重问题</li><li><p>软件危机的典型表现：</p><ol><li>对软件开发成本和进度的估计常常很不准确</li><li>用户对“已完成的”软件系统不满意的现象经常发生（常因为软件需求分析不够充分）</li><li>软件产品的质量往往靠不住</li><li>软件维护困难<ol><li>难以改正程序中的错误；</li><li>难以根据用户的需要在原有程序中增加一些新的功饿哦能。</li></ol></li><li>软件通常没有合适的文档资料</li><li>软件成本在计算机系统总成本中所占的比例逐年上升</li><li>软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势</li></ol></li><li>软件的本质特性：复杂性、一致性、可变性、不可见性</li><li>产生软件危机的原因：与软件本身的特点有关、与软件开发与维护的方法不正确有关</li><li>软件本身的特点：<ol><li>软件与硬件不同：抽象性，问题的隐蔽性</li><li>软件不同于一般程序：<ol><li>远比一般程序规模庞大，复杂性高</li><li>大型软件开发既有技术问题，还有社会问题</li></ol></li></ol></li><li><h1 id="二、可行性研究（4）"><a href="#二、可行性研究（4）" class="headerlink" title="二、可行性研究（4）"></a><strong>二、可行性研究（4）</strong></h1></li></ul><h2 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h2><ol><li>可行性研究任务</li><li>数据流图基本符号，绘制过程及应用（<strong>难点：数据流图的应用</strong>）</li><li>数据字典的用途和建立<h2 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h2></li></ol><ul><li>可行性研究的目的：   说明该软件开发项目的实现在技术上、经济上和社会条件上的可行性，GB 8567 -88 《 计算机软件产品开发文件编制指南 》：用最小的代价在尽可能短的时间内确定问题是否能够并且值得解决。</li><li>三个方面：技术可行性、经济可行性、操作可行性、其他（法律、社会效应、管理问题）</li><li>可行性研究的主要任务：借助于当前系统的逻辑模型导出目标系统的逻辑模型，也就是解决目标系统“做什么”的问题</li><li>建立目标系统逻辑模型的图形工具：数据流图、数据字典</li><li>可行性分析的描述手段：系统流程图、数据流图</li><li><p>系统流程图：表达数据在系统各部件之间流动的情况，是物理数据流图</p><ol><li><img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/21系统流程图基本符号.png" alt="21系统流程图基本符号"></li><li><img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/22系统流程图系统符号.png" alt="22系统流程图系统符号"></li><li>例题：人工销售教材系统流程图<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/blog\source\_posts\软件工程\23人工销售教材系统流程图.png" alt="23人工销售教材系统流程图"></li><li>例题：计算机售书系统流程图<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/24计算机售书系统流程图.png" alt="24计算机售书系统流程图"></li><li><p>分层：</p><ol><li><p>建立高层的系统流程图，描绘系统总体概貌，表明系统的关键功能</p></li><li><p>分别对每个关键功能进行扩展，到合适的详细程度，花在单独的一页纸上</p></li><li><p>可多次扩展，直到描述完整</p></li></ol></li></ol></li><li>开发成本估计技术：<ol><li>代码行技术</li><li>任务分解技术：按阶段分解、按功能分解</li><li>自动估计成本技术：采用自动估计成本的软件工具</li></ol></li><li>运行费用估计：取决于系统的操作费用（操作人员数、工作时间、消耗的物资等）和维护费用</li><li>成本/效益分折方法：<ol><li>操作：估计开发成本、运行费用和新系统将带来的经济效益。</li><li>作用：比较新系统的开发成本和经济效益，以便从经济角度判断这个系统是否值得投资</li><li>系统的经济效益等于因使用新系统而增加的收入加上使用新系统可以节省的运行费用</li></ol></li><li>度量效益的方法<ol><li>货币的时间价值：以银行利率表示货币的时间价值</li><li>投资回收期：累计的经济效益等于最初的投资所需要的时间。</li><li>纯收入：整个软件生命期内，累计经济效益（折合成现在值）与投资之差。</li><li>资回收率:   指系统的投资在生命周期内达到的累计效益的利率。<h1 id="三、需求分析（4）"><a href="#三、需求分析（4）" class="headerlink" title="三、需求分析（4）"></a><strong>三、需求分析（4）</strong></h1></li></ol></li></ul><h2 id="重点：-1"><a href="#重点：-1" class="headerlink" title="重点："></a>重点：</h2><ol><li>基本技术（<strong>难点</strong>）</li><li>需求规格说明书的作用与组成。<h2 id="知识点：-2"><a href="#知识点：-2" class="headerlink" title="知识点："></a>知识点：</h2></li></ol><ul><li><p>需求内容来源：干系人、业务过程、规章制度、现有系统</p></li><li><p>软件需求：用户对所开发的软件在功能、性能、环境、可靠性等各方面的要求。</p></li><li><p>需求分析：主要回答待开发的系统必须“做什么”，并用 《 需求规格说明书 》 的形式准确、详细、规范地表达出来。</p></li><li><p>确定对系统的综合要求：</p><ol><li>功能需求</li><li>性能需求</li><li>可靠性和可用性需求</li><li>出错处理需求</li><li>接口需求</li><li>约束</li><li>逆向需求：系统不应该做什么</li><li>将来可能提出的需求</li></ol></li><li><p>需求获取技术：</p><ol><li>面谈</li><li>问卷调查</li><li>群体诱导技术：相同或不同的地点，同样的时间，20人左右，分析师参与</li><li>参与调查法：同样的时间地点，分析师参与</li><li>文档分析</li><li>头脑风暴</li><li>情景分析</li><li>原型化方法</li><li>建模方法</li><li>需求讨论会</li></ol></li><li><p>与用户沟通获取需求的方法</p><ol><li><p>访谈</p></li><li><p>面向数据流自顶向下求精：  进一步细化可行性研究阶段获得到高层数据流图。包括建立：</p><ol><li>详细的数据流图，描绘数据在软件系统内从输入移动到输出的过程中所经受到变换；</li><li>数据字典：定义数据流图中包含的元素；</li><li>实体关系（ ER ）图：从用户角度描述数据；</li><li>IPO 图：描述数据流图中处理框的功能和算法。</li></ol></li><li><p>简易的应用规格说明技术</p></li><li><p>快速建立软件原型</p></li></ol></li><li><p>结构化分析（ Structured Analysis , SA ）是面向数据流进行分析的方法，主要建立以下几种模型：</p><ol><li><p>数据/信息模型：实体关系图(Entity-Relationship Diagram,E-R图)来创建数据模型，描述系统中所有重要的数据对象，规定”对谁做“</p></li><li><p>功能模型：数据流图（Data Flow Diagram,DFD） ：用来创建功能模型，描述了信息流和数据转换，规定”何时做“</p></li><li><p>行为模型：状态转换图 （State-Transition Diagram,STD）用来创建行为模型，描述系统状态如何响应外部事件，而进行转换，规定”做什么“</p></li></ol></li><li><p>实体-联系图（ E - R 图）描绘系统的数据关系。</p><ol><li><p>实体：客观世界中存在的，可区分的事物。</p></li><li><p>数据对象：实体在数据模型中的体现，能由一组属性来定义的实体都可以被认为是数据对象。</p></li><li><p>属性：实体或数据对象所具有的性质。</p></li><li><p>联系：客观事物之间的联系。联系分为三种：</p><ol><li>一对一（ 1 : 1 ) ．</li><li>一对多联系（ 1 : N ) ．</li><li>多对多联系（ M : N ) </li></ol></li><li><p>E-R图的三种基本元素：<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/31ER图的三种基本元素.png" alt="ER图的三种基本元素"></p></li></ol></li><li><p>数据流图（DFD，Data Flow Diagram）描述数据处理过程的工具。从数据传递和数据处理的角度，刻画数据流从输入到输出的移动变换过程。</p><ol><li><p>“数据存储”代表数据静止状态，“数据流”代表数据的运动状态；</p></li><li><p>对于大型系统，常采用自顶下乡逐层分解的方法</p></li><li><p>基本符号：<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/32数据流图基本符号的含义.png" alt="32数据流图基本符号的含义"></p></li><li><p><img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/33数据流图附加符号的含义.png" alt="33数据流图附加符号的含义"></p></li><li><p>例：描述银行取款过程的数据流图</p><p><img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/34数据流图例题一.png" alt="34数据流图例题一"></p></li><li><p>数据流的父图和子图输入输出应保持一致</p></li><li><p>在多层数据流图中，顶层流图仅包含一个数据处理，代表被开发系统</p></li><li><p>底层流图是指其数据处理不需要在做分解的数据流图</p></li><li><p>中间层流图表示对其上层父图的细化</p></li><li><p>步骤：</p><ol><li>分析源（终）点、分析数据处理、分析数据流和数据存储</li><li>绘制顶层数据流图</li><li><p>将顶层数据流图细化</p></li><li><p>题目：商场业务处理系统     第三章PPT80页处</p><details><br>描述：假设某商场的经营业务。商场进货时，先发订货单给供应商，供应商收到订货单，将商品发给商场，商场货到付款，供应商收款后，将收据发给商场；当顾客到商场采购商品时，先下购物订单，商场查询库存中是否有此种商品，若有则发货给顾客；若没有，则向供应商订货，货到之后再销售给顾客；顾客收到货物之后付款，商场开收据给顾客；商场对货物的管理方面要求知道每种货物详细的销售情况。<br>解题：<br>1. 分析业务流程：订货过程<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/35数据流图例题二.png" alt="35数据流图例题二"><br>2. 绘制顶层数据流图<br></details></li></ol></li></ol></li><li><p>数据字典（DD，data dictionary）：对数据流图中包含的所有元素的定义的集合，使得每个图形元素的名字都有一个精确的、严格的定义。</p><ol><li><p>数据字典的内容：数据字典应由对下列4类元素的定义组成：</p><ol><li>数据流</li><li>数据流分量（数据元素）（数据项）</li><li>数据存储</li><li>处理</li></ol></li><li><p>定义数据的方法：<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/36数据字典定义符号.png" alt="36数据字典定义符号"></p></li><li><p>定义数据流：</p><ol><li>数据流名：</li><li>说明：简要介绍作用即它产生的原因和结果。</li><li>数据流来源：来自何方。</li><li>数据流去向：去向何处。</li><li>数据流组成：数据结构。</li><li>数据量流通量：数据量，流通量</li></ol></li><li><p>定义数据元素（数据项）：指数据处理中最小的，不可再分的单位。</p><ol><li>数据元素名：</li><li>类型：数字（离散值，连续值），文字（编码类型）</li><li>长度：</li><li>取值范围：</li><li>相关的数据元素及数据结构：</li></ol></li><li><p>定义数据存储</p><ol><li>数据文件名：</li><li>简述：存放的是什么数据 </li><li>输入数据：</li><li>输出数据 :</li><li>数据文件组成：数据结构</li><li>存储方式：顺序，直接，关键码</li><li>存取频率：</li></ol></li><li><p>定义数据处理</p><ol><li>处理名</li><li>编号</li><li>激活条件</li><li>处理逻辑</li><li>执行频率</li></ol></li><li><p>源点及终（汇）点词条描述</p><ol><li>名称：外部实体名</li><li>简要描述：什么外部实体</li><li>有关数据流：</li><li>数目：</li></ol></li><li><p>数据规范化：</p><ol><li><p>第一范式每个属性值都必须是原子值。 </p></li><li><p>第二范式满足第一范式条件，而且每个非关键字属性都由整个关键字决定。 </p></li><li><p>第三范式符合第二范式的条件，每个非关键字属性都仅由关键字决定，而且一个非关键字属性不能仅仅是对另一个非关键字属性的进一步描述。</p></li><li><p>范式低，冗余大，范式高，分解得细，冗余小，但处理过程复杂。</p></li></ol></li></ol></li><li><p>状态转换图（STD）：只能有一个初态，但可以有0~n个终态</p><ol><li><p>状态：任何可以被观察到的系统行为模式，一个状态代表系统的一种行为模式。</p></li><li><p>事件：某个特定时刻发生的事情，它是对引起系统做动作或（和）从一个状态转换到另一个状态的外界事情的抽象.</p></li><li><p>符号：</p><ol><li><p>初态用实心圆表示</p></li><li><p>终态用一对同心圆(内圆为实心圆)表示。</p></li><li><p>中间状态用圆角矩形表示，可以用两条水平横线把它分成上、中、下3个部分。</p><ol><li>上面部分为状态的名称，这部分是必须有的；</li><li>中间部分为状态变量的名字和值，这部分是可选的；</li><li>下面部分是活动表，这部分也是可选的。事件名(参数表)/动作<ol><li>在活动表中经常使用下述3种标准事件：entry, exit和do。</li><li>entry事件指定进入该状态的动作</li><li>exit事件指定退出该状态的动作</li><li>do事件则指定在该状态下的动作。需要时可以为事件指定参数表。活动表中的动作表达式描述应做的具体动作。</li></ol></li></ol></li><li><p>状态图中两个状态之间带箭头的连线称为状态转换，箭头指明了转换方向。</p><ol><li><p>状态变迁通常是由事件触发的，在这种情况下应在表示状态转换的箭头线上标出触发转换的事件表达式；如果在箭头线上未标明事件，则表示在源状态的内部活动执行完之后自动触发转换。</p></li><li><p>事件表达式的语法如下：<br>事件说明［守卫条件］／动作表达式，其中事件说明的语法为：事件名(参数表)。</p></li></ol></li><li><p>例：<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/37状态转换图例题.png" alt="37状态转换图例题"></p></li></ol></li></ol></li><li>其他图形工具：层次方框图、Warnier图、IPO图（输入、处理、输出图）</li><li>从4方面进行软件需求验证：一致性、完整性、现实性、有效性。（其中完整性和有效性应有用户参与）</li><li><p>比较完整的数据流图的例子</p> <details><ol><li><p>题目：教务管理系统</p></li><li><p>描述：某校准备开发一个学生成绩管理系统。在该系统中，教务人员录入学生信息、课程信息和成绩信息，学生可以随时查询自己所选课程的成绩。由于学生成绩属于敏感信息，系统必须提供必要的安全措施以防非法存取</p></li><li><p>0层DFD分析：</p><p>源点终点：教务人员（源点）；学生（终点）<br>数据处理：将系统当成一个整体“学生成绩管理”<br>数据流：学生信息、课程信息和成绩；（教务人员录入时）查询请求、查询结果（学生查询时）<br>数据文件：成绩文件、学生文件、课程文件。</p></li><li><p>0层DFD图：教务人员维护学生信息和课程信息，并登录学生的选课成绩；学生查询自己的成绩单。<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/38完整数据流图1.png" alt="38完整数据流图1"></p></li><li><p>1层DFD说明：</p><ol><li>“学生信息”是教务人员需要录入的一个信息，因此加入一个加入“录入学生信息” ; </li><li>同样得到“录入课程信息”、“登记成绩”两个数据处理。</li><li>数据流“查询请求”和“查询结果”应该由数据处理“查询成绩”来完成。</li><li>对第 0 层 DFD 的加工“学生成绩管理“进行展开。<br>数据处理：录入学生信息<pre><code>录入课程信息登记学生成绩查询学生成绩</code></pre>数据存储：增加这些数据流对应的数据存储，即“学生”、“课程”和“成绩” ，最后得到如图所示的第 1 层 DFD 。</li></ol></li><li><p>1层DFD对“学生成绩管理”展开<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/38完整数据流图2.png" alt="38完整数据流图2"></p></li><li><p>2层DFD说明：继续分解第 1 层 DFD 中的加工“查询学生成绩”<br>数据处理：分解为“合法性检查”和“查询成绩”<br>数据文件：合法的查询条件<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/38完整整数据流图3.png" alt="38完整整数据流图3"></p></li><li><p>部分数据字典：<img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/38完整数据流图4.png" alt="38完整数据流图4"><img src="/WatsonLuo/WatsonLuo.github.io.git/2019/05/30/软件工程/38完整数据流图5.png" alt="38完整数据流图5"><br></p></li></ol></details><p></p><h1 id="四、总体设计（6）"><a href="#四、总体设计（6）" class="headerlink" title="四、总体设计（6）"></a><strong>四、总体设计（6）</strong></h1></li></ul><h1 id="五、详细设计（4）"><a href="#五、详细设计（4）" class="headerlink" title="五、详细设计（4）"></a><strong>五、详细设计（4）</strong></h1><h1 id="六、实现（6）"><a href="#六、实现（6）" class="headerlink" title="六、实现（6）"></a><strong>六、实现（6）</strong></h1><h1 id="七、维护（2）"><a href="#七、维护（2）" class="headerlink" title="七、维护（2）"></a><strong>七、维护（2）</strong></h1><h1 id="八、软件项目管理（6）"><a href="#八、软件项目管理（6）" class="headerlink" title="八、软件项目管理（6）"></a><strong>八、软件项目管理（6）</strong></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件工程学概论（4学时）&lt;/li&gt;
&lt;li&gt;可行性研究（4学时）&lt;/li&gt;
&lt;li&gt;需求分析（4学时）&lt;/li&gt;
&lt;li&gt;总体设计（6学时）&lt;/li&gt;
&lt;li&gt;详细设计（4学时）&lt;/li&gt;
&lt;li&gt;实现（6学时）&lt;/li&gt;
&lt;li&gt;维护（2学时）&lt;/li&gt;
&lt;li&gt;软件项目管理（6学时）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>神经网络</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/05/14/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/05/14/神经网络/</id>
    <published>2019-05-14T05:32:03.000Z</published>
    <updated>2019-05-14T13:41:55.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="神经网络的起源和发展"><a href="#神经网络的起源和发展" class="headerlink" title="神经网络的起源和发展"></a><strong>神经网络的起源和发展</strong></h1><ul><li>1943年，神经元模型（MP模型）</li><li>1949年，Hebb提出改变神经元权值的学习规则，即Hebb规则</li><li>1982著名模型——Hopfield模型</li><li>1986年，多层网络中的反向传播学习算法（BP算法）</li></ul><h1 id="人工神经网络定义"><a href="#人工神经网络定义" class="headerlink" title="人工神经网络定义"></a><strong>人工神经网络定义</strong></h1><ul><li>人工神经网络有许多简单处理单元组成的网络，每个处理单元可能有一定量的局部存储，单元间有信道相连，信道上载有数据以用于不同的目的</li><li>特征：<ol><li>具有学习能力，它可通过样例进行学习并有对样例进行归纳的能力</li><li>并行性，因为其处理单元间的计算很大程度上是相互独立的。 <img src="/2019/05/14/神经网络/图片1神经元.png" title="神经元">其中xi为输入值，wi为权值，f(x)一般为非线性。</li></ol></li></ul><img src="/2019/05/14/神经网络/图片2响应函数.png" title="响应函数"><ol><li>阈值模型：<br> f(x)=x/abs(x)</li><li>Sigmoid函数模型：</li></ol><h1 id="网络模型分类"><a href="#网络模型分类" class="headerlink" title="网络模型分类"></a><strong>网络模型分类</strong></h1><ol><li>按照网络的拓扑结构：</li></ol><img src="/2019/05/14/神经网络/图片4拓扑分类.png" title="拓扑分类"><p>第二种较好，现常用</p><ol start="2"><li>按照信息传递特点：<img src="/2019/05/14/神经网络/图片5信息传递特点分类.png" title="信息传递特点分类"></li></ol><h1 id="神经网络的学习"><a href="#神经网络的学习" class="headerlink" title="神经网络的学习"></a><strong>神经网络的学习</strong></h1><ol><li>学习算法：<img src="/2019/05/14/神经网络/图片6学习算法.png" title="学习算法">也称有/无监督学习：是否存在标准答案，通过对比标准答案得到反馈<br>现常用是半监督，有监督的反馈好，但对于收集大量数据不利，无监督反馈不好，但对于数据要求低。</li></ol><h1 id="BP算法流程"><a href="#BP算法流程" class="headerlink" title="BP算法流程"></a><strong>BP算法流程</strong></h1><ul><li>正向传播FP(求损失)</li><li>反向传播BP</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;神经网络的起源和发展&quot;&gt;&lt;a href=&quot;#神经网络的起源和发展&quot; class=&quot;headerlink&quot; title=&quot;神经网络的起源和发展&quot;&gt;&lt;/a&gt;&lt;strong&gt;神经网络的起源和发展&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1943年，神经元模型（MP模
      
    
    </summary>
    
      <category term="人工智能" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>人工智能入门笔记3</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/05/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B03/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/05/07/人工智能入门笔记3/</id>
    <published>2019-05-07T06:13:51.000Z</published>
    <updated>2019-05-07T13:52:21.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语义网络"><a href="#语义网络" class="headerlink" title="语义网络"></a>语义网络</h1><ol><li><p>二元语义网络</p></li><li><ol><li><p>类属关系</p></li><li><ol><li>AKO(a kind of)一个事物是另一个事务的一种类型    鸟是一种动物</li><li>AMO(a member of)一个事物是另一个事务的成员   王芳是一个中共党员</li><li>ISA(is a)一个事物是另一个事务的实例                      鲫鱼是好吃的鱼</li></ol></li><li><p>包含关系：</p></li><li><p>属性关系：事务与其属性之间的关系</p></li><li><p>时间关系：before，after   写毕业论文  -&gt;  before    -&gt; 毕业</p></li><li><p>位置关系：locate_on</p></li><li><p>因果关系：if-then</p></li><li><p>组成关系：composed-of</p></li><li><p>事实性知识</p></li><li><p>情况、动作和事件表示</p></li></ol></li></ol><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>链的尾部的节点称为</p><ol><li>值继承</li><li>如果-需要继承</li><li>缺省继承</li><li>匹配：不同语义网络之间的相似</li></ol><p>练习：猪和羊都是动物</p><p>​            猪和羊都是哺乳动物</p><p>​            </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;语义网络&quot;&gt;&lt;a href=&quot;#语义网络&quot; class=&quot;headerlink&quot; title=&quot;语义网络&quot;&gt;&lt;/a&gt;语义网络&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;二元语义网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类属关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
      <category term="人工智能" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>网络协议分析器</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/05/01/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E5%99%A8/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/05/01/网络协议分析器/</id>
    <published>2019-05-01T04:38:49.000Z</published>
    <updated>2019-05-01T04:40:53.138Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pcap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">char</span>    <span class="keyword">u8_t</span>;        <span class="comment">/*无符号8比特长度类型*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">short</span>   <span class="keyword">u16_t</span>;       <span class="comment">/*无符号16比特长度类型*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">long</span>    <span class="keyword">u32_t</span>;       <span class="comment">/*无符号32比特长度类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_addr</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="keyword">u8_t</span> addr[<span class="number">6</span>];&#125;;<span class="comment">//48位以太网地址</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMac</span><span class="params">(struct eth_addr addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x:%02x:%02x:%02x:%02x:%02x\n"</span>, addr.addr[<span class="number">0</span>], addr.addr[<span class="number">1</span>], addr.addr[<span class="number">2</span>], addr.addr[<span class="number">3</span>], addr.addr[<span class="number">4</span>], addr.addr[<span class="number">5</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showIP</span><span class="params">(struct in_addr addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d.%d.%d.%d"</span>, addr.S_un.S_un_b.s_b1, addr.S_un.S_un_b.s_b2, addr.S_un.S_un_b.s_b3, addr.S_un.S_un_b.s_b4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ether_header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">u8_t</span> ether_dhost[<span class="number">6</span>];    <span class="comment">/* 目的以太网地址 */</span></span><br><span class="line"><span class="keyword">u8_t</span> ether_shost[<span class="number">6</span>];    <span class="comment">/* 源以太网地址 */</span></span><br><span class="line"><span class="keyword">u16_t</span> ether_type;       <span class="comment">/* 以太网类型 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARPHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">u16_t</span> hard;<span class="comment">//硬件类型</span></span><br><span class="line"><span class="keyword">u16_t</span> type;<span class="comment">//上层协议类型</span></span><br><span class="line"><span class="keyword">u8_t</span> macLen;<span class="comment">//硬件地址长度</span></span><br><span class="line"><span class="keyword">u8_t</span> IPLen;<span class="comment">//协议地址长度</span></span><br><span class="line"><span class="keyword">u16_t</span> operation;<span class="comment">//操作码0x1表示请求包，0x2表示应答包</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_addr</span> <span class="title">srcMac</span>;</span><span class="comment">//发送端硬件地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">srcIP</span>;</span><span class="comment">//发送端逻辑地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_addr</span> <span class="title">desMac</span>;</span><span class="comment">//目的端硬件地址(请求帧中不要求)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">desIP</span>;</span><span class="comment">//目的端逻辑地址</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//IP数据帧头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IPHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">/*IP报文固定字段有20字节，可选项0~40，IP报文最多60字节</span></span><br><span class="line"><span class="comment">IP选项（可有）</span></span><br><span class="line"><span class="comment">数据*/</span></span><br><span class="line"><span class="keyword">u8_t</span> vision_Headerlength;<span class="comment">//版本号4首部长度4（length*4得字节单位）</span></span><br><span class="line"><span class="keyword">u8_t</span> servetype;<span class="comment">//服务类型8（3位优先域，4位服务类型，1位未用位置0；服务类型分别为：最小时延，最大吞吐量，最高可靠性，最小费用。这四位至多一位能被置1）</span></span><br><span class="line"><span class="keyword">u16_t</span> length;<span class="comment">//总长度16</span></span><br><span class="line"><span class="keyword">u16_t</span> identification;<span class="comment">//标识16（ID值，如果分片，用来确认是否为同一数据包）</span></span><br><span class="line"><span class="keyword">u16_t</span> flag_offset;<span class="comment">//标志位3（1位保留，2为不分片，3表示后面还有分片）偏移量13</span></span><br><span class="line"><span class="comment">//（如果数据包是一个分片包，该域指明了当前分片包应该位于数据包的什么位置上。该域的值单位为8字节）</span></span><br><span class="line"><span class="keyword">u8_t</span> liveTime;<span class="comment">//生存时间8</span></span><br><span class="line"><span class="keyword">u8_t</span> protocol;<span class="comment">//高层协议类型8</span></span><br><span class="line"><span class="keyword">u16_t</span> checksum = <span class="number">0</span>;<span class="comment">//首部检验和16（只对头部内容进行错误检测）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">srcIP</span>;</span><span class="comment">//源IP地址32</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">desIP</span>;</span><span class="comment">//目的IP地址32</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//伪首部</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pseudoHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">/*　 伪首部共有12字节，包含IP首部的一些字段，有如下信息：</span></span><br><span class="line"><span class="comment">32位源IP地址</span></span><br><span class="line"><span class="comment">32位目的IP地址</span></span><br><span class="line"><span class="comment">8位保留字节(置0)、8位传输层协议号(TCP是6，UDP是17)、16位TCP报文长度(TCP首部+数据)。*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">srcIP</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">desIP</span>;</span></span><br><span class="line"><span class="keyword">u8_t</span> reserve = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">u8_t</span> protocal;</span><br><span class="line"><span class="keyword">u16_t</span> totalLength;</span><br><span class="line">pseudoHeader(struct in_addr src,struct in_addr des,<span class="keyword">u8_t</span> pro,<span class="keyword">u16_t</span> length)</span><br><span class="line">&#123;</span><br><span class="line">srcIP = src;</span><br><span class="line">desIP = des;</span><br><span class="line">protocal = pro;</span><br><span class="line">totalLength = htons(length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//UDP数据帧头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UDPHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">/*UDP和TCP校验和：伪首部+首部8字节+数据</span></span><br><span class="line"><span class="comment">伪首部不参与传输，但是参加校验和的计算*/</span></span><br><span class="line"><span class="keyword">u16_t</span> srcPort;<span class="comment">//源端口16,在需要对方回信时选用，不需要时可用全0</span></span><br><span class="line"><span class="keyword">u16_t</span> desPort;<span class="comment">//目的端口16</span></span><br><span class="line"><span class="keyword">u16_t</span> length;<span class="comment">//最小为8，仅有首部</span></span><br><span class="line"><span class="keyword">u16_t</span> checksum = <span class="number">0</span>;<span class="comment">//检验和16</span></span><br><span class="line"><span class="comment">//u8_t *data;//数据（必须进行填充使数据为16位倍数）</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//TCP数据帧头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCPHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//首部长度20～60字节</span></span><br><span class="line"><span class="keyword">u16_t</span> srcPort;<span class="comment">// 源端口16</span></span><br><span class="line"><span class="keyword">u16_t</span> desPort;<span class="comment">// 目的端口16</span></span><br><span class="line"><span class="keyword">u32_t</span> seqNumber;</span><br><span class="line"><span class="keyword">u32_t</span> ackNumber;</span><br><span class="line"><span class="keyword">u16_t</span> headerLength_reserved_control;</span><br><span class="line"><span class="keyword">u16_t</span> windowSize;</span><br><span class="line"><span class="keyword">u16_t</span> checksum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">u16_t</span> urgentPointer = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">u16_t</span> calculateChecksum(<span class="keyword">void</span> *header, <span class="keyword">void</span>* pseudo = <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;<span class="comment">//32字节</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (pseudo == <span class="literal">NULL</span>)</span><br><span class="line">&#123;num = (*((<span class="keyword">u8_t</span>*)header) &amp; <span class="number">0x0F</span>) * <span class="number">4</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">num = ntohs(*((<span class="keyword">u16_t</span>*)pseudo + <span class="number">5</span>));</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span>)flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num / <span class="number">2</span>; i++)</span><br><span class="line">&#123;result += *((<span class="keyword">u16_t</span>*)header + i);&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)result += *((<span class="keyword">u8_t</span>*)header + num - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span> &amp;&amp; pseudo != <span class="literal">NULL</span>; i++)</span><br><span class="line">&#123;result += *((<span class="keyword">u16_t</span>*)pseudo + i);&#125;</span><br><span class="line">result += result &gt;&gt; <span class="number">16</span>;</span><br><span class="line">result = result &amp; <span class="number">0xFFFF</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ARPAnalysis</span><span class="params">(<span class="keyword">const</span> u_char *packet_content)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARPHeader</span>* <span class="title">arp</span> = (<span class="title">struct</span> <span class="title">ARPHeader</span>*)<span class="title">packet_content</span>;</span></span><br><span class="line"><span class="comment">//char sendBuf[100];</span></span><br><span class="line"><span class="comment">//inet_ntop(AF_INET, (void*)&amp;arp-&gt;srcIP, sendBuf, 16);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-----------    ARP协议解析开始   ------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"硬件类型为：\n"</span>); <span class="keyword">if</span> (arp-&gt;hard == <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"以太网\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"上层协议类型为：\n"</span>); <span class="keyword">if</span> (arp-&gt;type == <span class="number">0x0800</span>)<span class="built_in">printf</span>(<span class="string">"IP协议\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"硬件地址长度%x\n"</span>, arp-&gt;macLen);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"协议地址长度%x\n"</span>, arp-&gt;IPLen);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"发送端硬件地址\n"</span>); showMac(arp-&gt;srcMac);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"目的端硬件地址\n"</span>); showMac(arp-&gt;desMac);</span><br><span class="line"><span class="keyword">if</span> (ntohs(arp-&gt;operation) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"谁的IP地址是"</span>); showIP(arp-&gt;srcIP);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"，请告诉"</span>); showIP(arp-&gt;desIP);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ntohs(arp-&gt;operation) == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IP地址"</span>); showIP(arp-&gt;desIP);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"在"</span>); showMac(arp-&gt;srcMac);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-----------    ARP协议解析结束   ------------\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPAnalysis</span><span class="params">(<span class="keyword">const</span> u_char *packet_content, struct pseudoHeader pseudo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCPHeader</span>* <span class="title">tcp</span> = (<span class="title">struct</span> <span class="title">TCPHeader</span>*)<span class="title">packet_content</span>;</span></span><br><span class="line"><span class="comment">//char sendBuf[100];</span></span><br><span class="line"><span class="comment">//inet_ntop(AF_INET, (void*)&amp;arp-&gt;srcIP, sendBuf, 16);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-----------    TCP协议解析开始   ------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"源端口号：%u\n"</span>, ntohs(tcp-&gt;srcPort));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"目的端口号：%u\n"</span>, ntohs(tcp-&gt;desPort));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"序列号为：%u\n"</span>, ntohl(tcp-&gt;seqNumber));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"确认号为：%u\n"</span>, ntohl(tcp-&gt;ackNumber));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"首部长度为：%u\n"</span>, (ntohs(tcp-&gt;headerLength_reserved_control) &gt;&gt; <span class="number">12</span>) * <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"控制字：\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"URG：%d\n"</span>, (ntohs(tcp-&gt;headerLength_reserved_control) &amp; <span class="number">0x0020</span>) &gt;&gt; <span class="number">5</span>);<span class="comment">//0000 0000 0010 0000;0x0020 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ACK：%d\n"</span>, (ntohs(tcp-&gt;headerLength_reserved_control) &amp; <span class="number">0x0010</span>) &gt;&gt; <span class="number">4</span>);<span class="comment">//0000 0000 0010 0000;0x0020 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"PSH：%d\n"</span>, (ntohs(tcp-&gt;headerLength_reserved_control) &amp; <span class="number">0x0008</span>) &gt;&gt; <span class="number">3</span>);<span class="comment">//0000 0000 0010 0000;0x0020 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"RST：%d\n"</span>, (ntohs(tcp-&gt;headerLength_reserved_control) &amp; <span class="number">0x0004</span>) &gt;&gt; <span class="number">2</span>);<span class="comment">//0000 0000 0010 0000;0x0020 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"SYN：%d\n"</span>, (ntohs(tcp-&gt;headerLength_reserved_control) &amp; <span class="number">0x0002</span>) &gt;&gt; <span class="number">1</span>);<span class="comment">//0000 0000 0010 0000;0x0020 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"FIN：%d\n"</span>, ntohs(tcp-&gt;headerLength_reserved_control) &amp; <span class="number">0x0001</span>);<span class="comment">//0000 0000 0010 0000;0x0020 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"窗口大小为：%u\n"</span>, ntohs(tcp-&gt;windowSize));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"校验和为：%x\n"</span>, ntohs(tcp-&gt;checksum));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"校验和状态："</span>);</span><br><span class="line"><span class="keyword">if</span> (calculateChecksum((<span class="keyword">void</span>*)packet_content, (<span class="keyword">void</span>*)&amp;pseudo) == <span class="number">0xFFFF</span>)</span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">"Good！\n"</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">"Bad！\n"</span>);&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"紧急指针为：%d\n"</span>, ntohs(tcp-&gt;urgentPointer));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-----------    TCP协议解析结束   ------------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UDPAnalysis</span><span class="params">(<span class="keyword">const</span> u_char *packet_content, struct pseudoHeader pseudo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UDPHeader</span>* <span class="title">udp</span> = (<span class="title">struct</span> <span class="title">UDPHeader</span>*)<span class="title">packet_content</span>;</span></span><br><span class="line"><span class="comment">//char sendBuf[100];</span></span><br><span class="line"><span class="comment">//inet_ntop(AF_INET, (void*)&amp;arp-&gt;srcIP, sendBuf, 16);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-----------    UDP协议解析开始   ------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"源端口号：%d\n"</span>, ntohs(udp-&gt;srcPort));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"目的端口号：%d\n"</span>, ntohs(udp-&gt;desPort));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"UDP长度为：%d\n"</span>, ntohs(udp-&gt;length));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"校验和为：%d\n"</span>, ntohs(udp-&gt;checksum));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"校验和状态："</span>);</span><br><span class="line"><span class="keyword">if</span> (calculateChecksum((<span class="keyword">void</span>*)packet_content, (<span class="keyword">void</span>*)&amp;pseudo) == <span class="number">0xFFFF</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Good！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bad！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-----------    UDP协议解析结束   ------------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IPAnalysis</span><span class="params">(<span class="keyword">const</span> u_char *packet_content)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IPHeader</span>* <span class="title">ip</span> = (<span class="title">struct</span> <span class="title">IPHeader</span>*)<span class="title">packet_content</span>;</span></span><br><span class="line"><span class="keyword">u16_t</span> headerLength, totalLength;</span><br><span class="line"><span class="comment">//char sendBuf[100];</span></span><br><span class="line"><span class="comment">//inet_ntop(AF_INET, (void*)&amp;arp-&gt;srcIP, sendBuf, 16);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-----------    IP协议解析开始   ------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"版本号：%d\n"</span>, (ip-&gt;vision_Headerlength &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">headerLength = (ip-&gt;vision_Headerlength &amp; <span class="number">0x0F</span>) * <span class="number">4</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"首部长度：%d\n"</span>, headerLength);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"优先域为：%1x%1x%1x\n"</span>, (ip-&gt;servetype &amp; <span class="number">0x80</span>) / <span class="number">8</span>, (ip-&gt;servetype &amp; <span class="number">0x40</span>) / <span class="number">4</span>, (ip-&gt;servetype &amp; <span class="number">0x20</span>) / <span class="number">2</span>);<span class="comment">//1110 000</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"服务类型（最小时延，最大吞吐量，最高可靠性，最小费用）："</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%1x%1x%1x%1x\n"</span>, (ip-&gt;servetype &amp; <span class="number">0x10</span>) &gt;&gt; <span class="number">4</span>, (ip-&gt;servetype &amp; <span class="number">0x08</span>) / <span class="number">8</span>, (ip-&gt;servetype &amp; <span class="number">0x04</span>) / <span class="number">4</span>, (ip-&gt;servetype &amp; <span class="number">0x02</span>) / <span class="number">2</span>);<span class="comment">//0001 1110</span></span><br><span class="line">totalLength = ntohs(ip-&gt;length);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IP报文总长度：%d\n"</span>, totalLength);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标识：%d\n"</span>, ntohs(ip-&gt;identification));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志位（1位保留，2为不分片，3表示后面还有分片）：\n"</span>);</span><br><span class="line"><span class="keyword">u8_t</span> flag = (ntohs(ip-&gt;flag_offset) &amp; <span class="number">0x0E000</span>) &gt;&gt; <span class="number">13</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%1x%1x%1x\n"</span>, (flag &amp; <span class="number">0x04</span>) &gt;&gt; <span class="number">2</span>, (flag &amp; <span class="number">0x02</span>) &gt;&gt; <span class="number">1</span>, flag &amp; <span class="number">0x01</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"偏移量（单位：8字节）：%d\n"</span>, ntohs(ip-&gt;flag_offset) &amp; <span class="number">0x1FFF</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"生存时间：\n%d\n"</span>, ip-&gt;liveTime);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"高层协议类型为："</span>); </span><br><span class="line"><span class="keyword">switch</span> (ip-&gt;protocol)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"UDP协议\n"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TCP协议\n"</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x\n"</span>, ip-&gt;protocol); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"首部校验和：%x\n"</span>, ntohs(ip-&gt;checksum));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"校验和状态："</span>);</span><br><span class="line"><span class="keyword">if</span> (calculateChecksum((<span class="keyword">void</span>*)packet_content) == <span class="number">0xFFFF</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Good！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bad！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"发送端IP地址\n"</span>); showIP(ip-&gt;srcIP);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n目的端IP地址\n"</span>); showIP(ip-&gt;desIP);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-----------    IP协议解析结束   ------------\n"</span>);</span><br><span class="line"><span class="function">struct pseudoHeader <span class="title">pseudo</span><span class="params">(ip-&gt;srcIP, ip-&gt;desIP, ip-&gt;protocol, totalLength - headerLength)</span></span>;</span><br><span class="line"><span class="keyword">switch</span> (ip-&gt;protocol)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">UDPAnalysis(packet_content + headerLength, pseudo);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">TCPAnalysis(packet_content + headerLength, pseudo);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x\n"</span>, ip-&gt;protocol); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数：名字可改，按照该函数进行解析数据包协议；参数个数，参数类型，返回值类型都按照WinpCap定义，不能更改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">packet_callback</span><span class="params">(u_char *user_data, <span class="comment">//传参</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> struct pcap_pkthdr *packet_header, <span class="comment">//成员：时间信息，当前已经用到的数据的长度，数据包的长度</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> u_char *packet_content)</span><span class="comment">//指向捕获到的数据包的开始</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u_short ethernet_type;                     <span class="comment">/* 以太网类型 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ether_header</span> *<span class="title">ethernet_protocol</span>;</span>    <span class="comment">/* 以太网协议变量 */</span><span class="comment">//以太帧头结构体指针,指向的结构体类型</span></span><br><span class="line">u_char *mac_string;                        <span class="comment">/* 以太网地址 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> packet_number = <span class="number">1</span>;              <span class="comment">/* 捕获数据包个数 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**************************************************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"捕获第%d个以太网数据包\n"</span>, packet_number);</span><br><span class="line"><span class="comment">//char buff[27];</span></span><br><span class="line"><span class="comment">//printf("捕获时间:\n");</span></span><br><span class="line"><span class="comment">//printf("%s", ctime_s(buff,26,(const time_t*)&amp;packet_header-&gt;ts.tv_sec));//sprftime</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数据包长度:\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, packet_header-&gt;len);<span class="comment">//数据包的长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----------    以太网协议   ------------\n"</span>);</span><br><span class="line">ethernet_protocol = (struct ether_header*)packet_content;<span class="comment">/* 获得以太网协议内容 */</span><span class="comment">//按照结构体来使用数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"以太网类型:\n"</span>);</span><br><span class="line">ethernet_type = ntohs(ethernet_protocol-&gt;ether_type);       <span class="comment">/* 获得以太网类型 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%04x\n"</span>, ethernet_type);</span><br><span class="line"><span class="keyword">switch</span> (ethernet_type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0800</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"上层协议为IP协议\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0806</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"上层协议是ARP协议\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x8035</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"上层协议为RARP协议\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mac_string = ethernet_protocol-&gt;ether_shost;<span class="comment">//指向第七个字节</span></span><br><span class="line"><span class="comment">/* 获得源以太网地址 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"源以太网地址: \n%02x:%02x:%02x:%02x:%02x:%02x\n"</span>, *mac_string, *(mac_string + <span class="number">1</span>), *(mac_string + <span class="number">2</span>), *(mac_string + <span class="number">3</span>), *(mac_string + <span class="number">4</span>), *(mac_string + <span class="number">5</span>));</span><br><span class="line"><span class="comment">/* 获得目的以太网地址 */</span></span><br><span class="line">mac_string = ethernet_protocol-&gt;ether_dhost;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"目的以太网地址: \n%02x:%02x:%02x:%02x:%02x:%02x\n"</span>, *mac_string, *(mac_string + <span class="number">1</span>), *(mac_string + <span class="number">2</span>), *(mac_string + <span class="number">3</span>), *(mac_string + <span class="number">4</span>), *(mac_string + <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ethernet_type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0800</span>:</span><br><span class="line">IPAnalysis(packet_content + <span class="keyword">sizeof</span>(struct ether_header));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0806</span>:</span><br><span class="line">ARPAnalysis(packet_content + <span class="keyword">sizeof</span>(struct ether_header));<span class="comment">//Mac帧14</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x8035</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"上层协议为RARP协议\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**************************************************\n\n\n"</span>);</span><br><span class="line">packet_number++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">pcap_t</span> *fp;</span><br><span class="line"><span class="keyword">char</span> errbuf[PCAP_ERRBUF_SIZE];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pcap_if_t</span> *alldevs;</span><br><span class="line"><span class="keyword">pcap_if_t</span> *d;</span><br><span class="line"><span class="keyword">int</span> inum;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bpf_program</span> <span class="title">bpf_filter</span>;</span>        <span class="comment">/* PBF过滤规则 */</span><span class="comment">//bpf_filter是给机器看的规则</span></span><br><span class="line"><span class="keyword">char</span> bpf_filter_string[] = <span class="string">""</span>;     <span class="comment">/* 过滤规则字符串 */</span><span class="comment">//按照TCP进行过滤，给人看的，机器不懂</span></span><br><span class="line">bpf_u_int32 net_mask;                 <span class="comment">/* 掩码地址 */</span></span><br><span class="line">bpf_u_int32 net_ip;                   <span class="comment">/* 网络地址 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pcap_findalldevs(&amp;alldevs, errbuf) == <span class="number">-1</span>)<span class="comment">//找网卡</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error in pcap_findalldevs: %s\n"</span>, errbuf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Print the device list */</span></span><br><span class="line"><span class="keyword">for</span> (d = alldevs; d; d = d-&gt;next)<span class="comment">//打印所有网卡信息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d. %s"</span>, ++i, d-&gt;name);</span><br><span class="line"><span class="keyword">if</span> (d-&gt;description)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" (%s)\n"</span>, d-&gt;description);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" (No description available)\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nNo interfaces found! Make sure WinPcap is installed.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Enter the interface number (1-%d):"</span>, i);<span class="comment">//用户选择网卡</span></span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;inum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inum &lt; <span class="number">1</span> || inum &gt; i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nInterface number out of range.\n"</span>);</span><br><span class="line"><span class="comment">/* Free the device list */</span></span><br><span class="line">pcap_freealldevs(alldevs);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Jump to the selected adapter */</span></span><br><span class="line"><span class="keyword">for</span> (d = alldevs, i = <span class="number">0</span>; i &lt; inum - <span class="number">1</span>; d = d-&gt;next, i++);</span><br><span class="line">pcap_lookupnet(d-&gt;name, &amp;net_ip, &amp;net_mask, errbuf);</span><br><span class="line"><span class="comment">/* Open the adapter */</span></span><br><span class="line"><span class="keyword">if</span> ((fp = pcap_open_live(d-&gt;name,<span class="comment">// name of the device</span></span><br><span class="line"><span class="number">65536</span>,<span class="comment">// portion of the packet to capture. It doesn't matter in this case </span></span><br><span class="line"><span class="number">1</span>,<span class="comment">// promiscuous mode (nonzero means promiscuous)设置为混杂模式</span></span><br><span class="line"><span class="number">1000</span>,<span class="comment">// read timeout</span></span><br><span class="line">errbuf<span class="comment">// error buffer</span></span><br><span class="line">)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nUnable to open the adapter. %s is not supported by WinPcap\n"</span>, d-&gt;name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pcap_compile(fp, &amp;bpf_filter, bpf_filter_string, <span class="number">0</span>, net_mask) &lt; <span class="number">0</span>)    <span class="comment">/* 编译BPF过滤规则 */</span><span class="comment">//已经打开的捕捉实例（已选中的网卡），编译结果，编译源，</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nUnable to compile the packet filter. Check the syntax.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcap_setfilter(fp, &amp;bpf_filter);    <span class="comment">/* 设置过滤规则 */</span><span class="comment">//加载过滤规则：指定网卡，机器过滤规则</span></span><br><span class="line"><span class="keyword">if</span> (pcap_datalink(fp) != DLT_EN10MB)</span><br><span class="line"><span class="keyword">return</span>  <span class="number">-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册回调函数，循环捕获数据包，然后调用回调函数处理此数据包 */</span></span><br><span class="line">pcap_loop(fp, <span class="number">-1</span>, packet_callback, <span class="literal">NULL</span>);   <span class="comment">//指定网卡，应捕获的数据包的个数（-1表示无穷），告诉Winpcap应该用哪个回调函数，向回调函数传递的参数</span></span><br><span class="line"></span><br><span class="line">pcap_close(fp);    <span class="comment">/* 关闭Winpcap操作 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="计算机网络" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo添加图片</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/26/hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/26/hexo添加图片/</id>
    <published>2019-04-26T14:24:48.000Z</published>
    <updated>2019-05-03T11:53:26.656Z</updated>
    
    <content type="html"><![CDATA[<p>效果展示：<br><img src="/2019/04/26/hexo添加图片/杀生丸.jpg" title="方式一"></p><p><img src="/2019/04/26/hexo添加图片/水君.jpg&quot;方式二&quot;" alt="水君帅照"></p><p><img src="/2019/04/26/hexo添加图片/风速狗.jpg" alt="方式三"></p><a id="more"></a><h1 id="方法一-推荐-：hexo标签插件"><a href="#方法一-推荐-：hexo标签插件" class="headerlink" title="方法一(推荐)：hexo标签插件"></a><strong>方法一(推荐)：hexo标签插件</strong></h1><ol><li><p>首先把_config.yml文件中的post_asset_folder更改为true</p></li><li><p>之后你在hexo new “xxx”的时候就会在source中生成一个xxx文件夹<br>将你需要显示的照片放在该文件夹中</p></li><li><p>然后使用命令安装标签插件<code>npm install hexo-asset-image --save</code></p><p> （但是我并没有安装这个，也能成功显示图片）</p></li><li><p>最后使用语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img 图像名.jpg 鼠标悬停显示信息 %&#125;</span><br></pre></td></tr></table></figure></li></ol><p>图片后缀不限于jpg，但我也只试了png，大家可以试试别的~</p><p>本文章的第一个图片（杀生丸）就是用这种方式显示的</p><p>这种方式可以在文章的详情页面和主页中都将图片显示出来</p><p>实例展示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img 杀生丸.jpg 方式一 %&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure><h1 id="方法二-首页无法显示-：Markdown语法"><a href="#方法二-首页无法显示-：Markdown语法" class="headerlink" title="方法二(首页无法显示)：Markdown语法"></a><strong>方法二(首页无法显示)：Markdown语法</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![水君帅照](/水君.jpg&quot;方式二&quot;)</span><br></pre></td></tr></table></figure><h1 id="方法三-首页无法显示-：HTML语法"><a href="#方法三-首页无法显示-：HTML语法" class="headerlink" title="方法三(首页无法显示)：HTML语法"></a><strong>方法三(首页无法显示)：HTML语法</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;风速狗.jpg&quot;  alt=&quot;方式三&quot; /&gt;</span><br></pre></td></tr></table></figure><h1 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h1><p>资源文件夹<br>资源（Asset）代表source文件夹中除了文章以外的所有文件，例如图片、CSS、JS文件等。<br>比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。<br>然后通过类似于 <img src="/images/image.jpg" alt> 的方法访问它们。</p><p>文章资源文件夹<br>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。<br>这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。</p><p>_config.yml<br>post_asset_folder: true<br>当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。<br>这个资源文件夹将会有与这个markdown文件一样的名字。<br>将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</title></p><p>相对路径引用的标签插件<br>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。<br>在Hexo 2时代，社区创建了很多插件来解决这个问题。<br>但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法<br><code>![](/example.jpg)</code><br>它将不会出现在首页上<br>（但是它会在文章中按你期待的方式工作）</p><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;效果展示：&lt;br&gt;&lt;img src=&quot;/2019/04/26/hexo添加图片/杀生丸.jpg&quot; title=&quot;方式一&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/04/26/hexo添加图片/水君.jpg&amp;quot;方式二&amp;quot;&quot; alt=&quot;水君帅照&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/04/26/hexo添加图片/风速狗.jpg&quot; alt=&quot;方式三&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>如果在struct\\class中动态申请空间，sizeof()的结果</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/25/%E5%A6%82%E6%9E%9C%E5%9C%A8struct-class%E4%B8%AD%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E7%A9%BA%E9%97%B4%EF%BC%8Csizeof-%E7%9A%84%E7%BB%93%E6%9E%9C/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/25/如果在struct-class中动态申请空间，sizeof-的结果/</id>
    <published>2019-04-25T13:22:47.000Z</published>
    <updated>2019-04-27T13:02:53.306Z</updated>
    
    <content type="html"><![CDATA[<p>问题：如果在一个struct或class中定义一个指针，然后用这个指针去动态申请一片内存，那么sizeof(实例)的结果会是4(指针大小)还是动态内存的大小呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">public:char* b;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">struct A a;</span><br><span class="line">a.b = new char[7];</span><br><span class="line">a.b[0] = &apos;H&apos;;</span><br><span class="line">a.b[1] = &apos;e&apos;;</span><br><span class="line">a.b[2] = &apos;l&apos;;</span><br><span class="line">a.b[3] = &apos;l&apos;;</span><br><span class="line">a.b[4] = &apos;o&apos;;</span><br><span class="line">a.b[5] = &apos;!&apos;;</span><br><span class="line">a.b[6] = &apos;\0&apos;;</span><br><span class="line">cout &lt;&lt; &quot;a的大小为&quot; &lt;&lt; sizeof(a) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;A的大小为&quot; &lt;&lt; sizeof(A) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a.b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：无论是作用于类还是实例，结果都是指针的大小，结果是4</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：如果在一个struct或class中定义一个指针，然后用这个指针去动态申请一片内存，那么sizeof(实例)的结果会是4(指针大小)还是动态内存的大小呢？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="C\/C++" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/25/%E8%BD%AC-%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6%EF%BC%8C%E8%83%8C%E5%90%8E%E4%BC%9A%E8%BF%9B%E8%A1%8C%E5%93%AA%E4%BA%9B%E6%8A%80%E6%9C%AF%E6%AD%A5%E9%AA%A4%EF%BC%9F/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/25/转-在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？/</id>
    <published>2019-04-25T07:19:48.000Z</published>
    <updated>2019-04-27T16:49:05.161Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章转自于：<a href="https://www.zhihu.com/question/34873227/answer/518086565?utm_source=qq&amp;utm_medium=social&amp;utm_oi=826718551887990784" target="_blank" rel="noopener">https://www.zhihu.com/question/34873227/answer/518086565?utm_source=qq&amp;utm_medium=social&amp;utm_oi=826718551887990784</a></p><p>为了让更多读者理解这个问题，接下来派出男主角小明出场，采用拟人的手法来阐述整个过程。</p><p>小明听说最近两天知乎有一个帖子挺火，问题的提出者是腾讯的总裁 Pony Ma，有一个回答是这样的：</p><p>于是小明想去看看精彩评论，于是开始了网上冲浪之旅。。。</p><p>小明打开浏览器，输入<a href="http://zhihu.com敲回车键。" target="_blank" rel="noopener">http://zhihu.com敲回车键。</a></p><p>在小明眼里，浏览器是自己的小奴才，让你干啥就干啥。</p><p>浏览器才不这么看，鄙人也是有自己独立的人格的。老板的命令是对的，那自然照做。如果是错误的，就当老板放P！</p><p>如果小明输入的是 “zhi hu.com” 或 “<a href="mailto:zhi@hu.com1" target="_blank" rel="noopener">zhi@hu.com1</a>”, 这些网址都是非法无效的，浏览器就要拒绝小明的无理要求，提示小明出错了。</p><p>所以，第一步是浏览器对用户输入的网址做初步的格式化检查，只有通过以上检查才会进入下一步。</p><p>浏览器是用http还是https访问服务器呢？<br>小明并没有明确告知浏览器是用哪个协议，针对此种情况，浏览器有自己的预案，那就是默认使用http协议，除非小明输入的是“https ://<a href="http://zhihu.com”。" target="_blank" rel="noopener">http://zhihu.com”。</a></p><p>所以，小明输入的网址被浏览器补齐为“<a href="http://zhihu.com”" target="_blank" rel="noopener">http://zhihu.com”</a> 。</p><p>浏览器知道，TCP/IP快递公司那帮王八蛋，只有告诉它们收件人的IP地址，才会把快递送到收件人地址。告诉他们 “zhihu.com”如同对牛弹琴，它们不懂啊！</p><p>浏览器于是联系“黄页公司” DNS，请帮我查询一下“zhihu.com” 的IP地址是多少？</p><p>DNS是个老实孩子，自己能查询到的，绝不麻烦别人。</p><p>先查自己内存里的DNS Cache，没有！<br>再查本地硬盘里的host文件，也没有！</p><p>实在没辙只有求人了，于是DNS硬着头皮去联系自己的DNS服务器 8.8.8.8。</p><p>DNS将自己的查询打好包，收件人地址为8.8.8.8，寄件人地址为1.1.1.1，DNS联系TCP/IP快递公司。</p><p>负责接洽的是UDP，UDP懒洋洋的躺在沙发上，随手在包裹上刷刷写了几笔：</p><p>收件人门牌号 53<br>发件人门牌号 56002</p><p>之所以要有门牌号，是因为一个收件人地址可能会有多个门牌号，为了避免混淆。对于整天浸淫在快递行业的UDP，太了解这个行业了。</p><p>UDP给货车司机IP打电话：老四啊，有件快递需要你捎带一下。。。</p><p>IP司机来了，把包裹扔上车，坐上驾驶座，准备开车。</p><p>IP司机查询了导航(IP路由表)，发现要出关(Gateway)，这个关口有点怪癖，需要司机知道其MAC地址，导航信息里竟然没有。</p><p>于是IP司机找到了当地向导ARP，老师傅，麻烦您带带路啊！</p><p>ARP没有废话，声音洪亮地喊了一嗓子，网关你MAC地址多少啊，告诉老夫一声！</p><p>很快传来了网关的回答：我的MAC地址是xx.xx.xx.xx.xx.xx</p><p>有了关口的MAC地址，IP司机终于可以开车上路了。</p><p>很快就到达了关口，关口放行，IP司机载着快递，上了Internet高速公路，一路狂奔不表。。。</p><p>到达目的地8.8.8.8，服务器根据门牌号码53，知道这是DNS Server大叔家的快递。</p><p>喊大叔来收快递，大叔打开包裹一看，这个好回答啊，<a href="http://zhihu.com对应的IP地址正好在缓存里还热着呢，于是将其回复回去。" target="_blank" rel="noopener">http://zhihu.com对应的IP地址正好在缓存里还热着呢，于是将其回复回去。</a></p><p>这个DNS大叔有一个特点，打破沙锅问到底的学习精神，俗称的一根筋。如果DNS大叔的本地缓存里查询没有，怎么办呢？</p><p>DNS大叔会去联系DNS域名系统的根服务器“.”</p><p>有读者会问，“.”代表的就是根服务器？</p><p>对的，我们经常看到的网址如<a href="http://zhihu.com，完整的写法应该是" target="_blank" rel="noopener">http://zhihu.com，完整的写法应该是</a> zhihu.com. 最后的那个“.”相当于树根，天下所有的叶子域名，都是树根的孩子、孩子的孩子….</p><p>根域名服务器全球一共多少台？<br>13台</p><p>1台不行吗？<br>万一根服务器挂了，会影响全球的域名查询系统。使用多台根服务器，可以提供物理冗余，分摊全球的域名查询任务。</p><p>DNS大叔知道13台根服务器的IP地址吗？<br>知道。</p><p>DNS大叔就会去联系13台根服务器的一员，查询自己想要的结果。</p><p>根服务器一看“zhihu.com.” ，知道是自己的孙子，却不知道其IP地址。但根服务器相信孙子的爸爸“com”会知道，于是告诉DNS大叔，请去联系我孙子的爸爸，他的IP地址是x.x.x.x。</p><p>DNS大叔锲而不舍地去联系孙子的爸爸，毫无疑问，爸爸肯定知道儿子的IP地址，儿子的名字都是自己起的，能不知道吗？</p><p>将结果告诉了DNS大叔，大叔如获至宝，立马将结果告诉了远在千里之外等待的DNS老实孩子，结果应该是这个样子的：</p><p>累死了，鼓捣了半天才算拿到服务器的IP地址，DNS把结果返回给浏览器。</p><p>浏览器再次联系TCP/IP快递公司，这次与其接洽的是TCP阿姨，TCP做事非常认真。</p><p>知道浏览器想要去拜访“118.89.204.100”，先和对方取得联系，看看对方在不在，这通常由三次握手实现的。</p><p>老阿姨：在家吗？想去拜访您。<br>对方：在的，欢迎啊。<br>老阿姨：马上到。</p><p>这一来二回的三次消息，也都需要IP司机来来回回运输三次，具体过程和上文IP司机运输DNS报文非常类似，就不再重复。</p><p>三次握手完成，TCP阿姨与对方建立了一个可靠的虚拟通道，浏览器很快知道了这个消息。</p><p>浏览器将http请求消息，打包好扔给TCP阿姨，阿姨在包裹上填上关键信息：</p><p>收件人门牌号 80<br>发件人门牌号 51235</p><p>然后也是联系IP司机来运输，过程不表。</p><p>包裹到达了目的地，服务器根据门牌号80，联系到了http server小姐姐。</p><p>小姐姐返回了一个消息：HTTP Redirect 消息，大意是，本公司服务器整体搬迁到<a href="https://www.zhihu.com上去了，请重新访问本司的新网址。" target="_blank" rel="noopener">https://www.zhihu.com上去了，请重新访问本司的新网址。</a></p><p>浏览器收到这个消息，立马前往<a href="https://www.zhihu.com，整个过程与http:/http://zhihu.com大体相似，接下来主要阐述不一样的地方。" target="_blank" rel="noopener">https://www.zhihu.com，整个过程与http:/http://zhihu.com大体相似，接下来主要阐述不一样的地方。</a></p><p>TCP三次握手成功之后，浏览器将自己的打包好的包裹，不是直接给TCP阿姨，而是委托TLS安保大叔全权负责。</p><p>TLS安保大叔，首要的任务是确保包裹在运输过程中的安全，即包裹的内容保密，包裹内容不能被篡改、替换。</p><p>TLS大叔需要先和对方沟通安保措施，沟通的渠道，就是上文三次握手建立的渠道。</p><p>TLS大叔先发言：你好，我支持TLS版本1.2，以及我的认证算法、加密算法、数据校验算法，此外还有我的随机码，收到请回复。</p><p>TLS服务器回复：你好，我也支持1.2版本，那我们就使用xx认证算法、xx加密算法、xx数据校验算法，我的随机码是xx，来实现安保措施，你看好吗？</p><p>TLS大叔:没问题啊，能出示一下你的证件(数字证书)吗？<br>TLS服务器：okay，这是我的证件，请过目。</p><p>TLS大叔发现对方发过来两个证书：<br>证书1: “*.zhihu.com”，由GeoTrust RSA CA 2018签名并颁发<br>证书2: “GeoTrust RSA CA 2018”，由DigiCert Global Root CA签名并颁发</p><p>验证过程如下：</p><p>1.用DigiCert Global Root CA的公钥解密证书2的签名</p><p>DigiCert Global Root CA作为一个权威CA，已经被浏览器预先安装在可信任根证书列表，那么我们信任该CA的一切，当然包括其公钥，在该证书里包含了明文的公钥，如下图所示：</p><p>解开了，证明是该CA私钥加密的，由于CA私钥只有CA知道，证书有效，并信任GeoTrust RSA CA 2018公钥。</p><p>解不开，证明不是CA私钥加密，无效证书。</p><ol start="2"><li>用GeoTrust RSA CA 2018的公钥解密证书1的签名</li></ol><p>过程和步骤1同样的原理，如果2个步骤都验证成功，就有了<a href="http://zhihu.com的公钥。" target="_blank" rel="noopener">http://zhihu.com的公钥。</a></p><p>TLS大叔还需要检查的证书有效期，再检查证书是否被吊销(CRL)，如果一切都没有问题，进入下一个步骤。</p><p>TLS大叔用“*.zhihu.com”公钥加密一段随机的字符串，发送给TLS服务器。<br>TLS服务器用自己的私钥解密，得到明文字符串。</p><p>至此，双方分享了这个神秘的字符串，双方还有早前分享的随机码(nonce)，双方使用同样的算法，可以推导出相同的master key，进而推导出session key、HMAC key。</p><p>Session Key用于加密/解密数据， HMAC Key主要用于保护数据的完整性，以防被第三方篡改。</p><p>整个TLS沟通过程就算完成了，TLS大叔把浏览器扔给自己的包裹，外面加了一层保险箱，密码锁（session key）只有TLS大叔、TLS服务器知道。</p><p>然后把保险箱再扔给TCP阿姨，TCP阿姨一点也不在乎，运输一个保险箱与一个普通包裹没有任何区别，唯一的区别是收件人的门牌号变了：</p><p>收件人门牌号 443</p><p>然后保险箱就被运走了，很快就到达了目的地，服务器老大爷一看门牌号443，知道这是TLS服务器的快递包裹。</p><p>TLS服务器用密码打开了保险箱，取出了快递。</p><p>在保险箱里还有一个小纸条写着“Application Data =http”, TLS服务器知道这是HTTP Server高富帅的包裹。</p><p>然后把包裹转交给高富帅，高富帅将<a href="http://www.zhihu.com" target="_blank" rel="noopener">http://www.zhihu.com</a> 主页返回，并最终到达浏览器。</p><p>小明很快就搜索到本文开始的那个回答，小明做梦都没有想到，自己的一次回车键，引发如此庞大的计算量。。。</p>]]></content>
    
    <summary type="html">
    
      引用自：https://www.zhihu.com/question/34873227/answer/518086565?utm_source=qq&amp;utm_medium=social&amp;utm_oi=826718551887990784
    
    </summary>
    
      <category term="计算机网络" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>网络协议编辑器</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/24/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/24/网络协议编辑器/</id>
    <published>2019-04-24T08:31:21.000Z</published>
    <updated>2019-05-01T04:36:41.249Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一层MAC</span></span><br><span class="line"><span class="comment">//第二层IP和ARP、RARP</span></span><br><span class="line"><span class="comment">//第三层（外层协议为IP）TCP、UDP、ICMP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"WS2_32.Lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">char</span>    <span class="keyword">u8_t</span>;        <span class="comment">//无符号8比特长度类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">short</span>   <span class="keyword">u16_t</span>;       <span class="comment">//无符号16比特长度类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">long</span>    <span class="keyword">u32_t</span>;       <span class="comment">//无符号32比特长度类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以太网地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_address</span> &#123;</span></span><br><span class="line"><span class="keyword">u8_t</span> addr[<span class="number">6</span>];                       <span class="comment">//48位以太网地址</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//IP地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IP_address</span> &#123;</span></span><br><span class="line"><span class="keyword">u8_t</span> addr[<span class="number">4</span>];                       <span class="comment">//32位IP地址</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//以太网数据帧头结构（MAC帧头）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_header</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_address</span> <span class="title">dest_address</span>;</span>    <span class="comment">//目的MAC地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_address</span> <span class="title">sour_address</span>;</span>    <span class="comment">//源MAC地址 </span></span><br><span class="line"><span class="keyword">u16_t</span> type;                           <span class="comment">//协议类型或数据长度 </span></span><br><span class="line"><span class="comment">//0x0800IP</span></span><br><span class="line"><span class="comment">//0x0806ARP</span></span><br><span class="line"><span class="comment">//0x8035RARP</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//ARP数据帧头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arpHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">u16_t</span> hard;<span class="comment">//硬件类型</span></span><br><span class="line"><span class="keyword">u16_t</span> type;<span class="comment">//协议类型</span></span><br><span class="line"><span class="keyword">u8_t</span> macLen;<span class="comment">//硬件地址长度</span></span><br><span class="line"><span class="keyword">u8_t</span> IPLen;<span class="comment">//协议地址长度</span></span><br><span class="line"><span class="keyword">u16_t</span> operation;<span class="comment">//操作码0x1表示请求包，0x2表示应答包</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_address</span> <span class="title">srcMac</span>;</span><span class="comment">//发送端硬件地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IP_address</span> <span class="title">srcIP</span>;</span><span class="comment">//发送端逻辑地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_address</span> <span class="title">desMac</span>;</span><span class="comment">//目的端硬件地址(请求帧中不要求)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IP_address</span> <span class="title">desIP</span>;</span><span class="comment">//目的端逻辑地址</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//IP数据帧头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IPHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">/*IP报文固定字段有20字节，可选项0~40，IP报文最多60字节</span></span><br><span class="line"><span class="comment">IP选项（可有）</span></span><br><span class="line"><span class="comment">数据*/</span></span><br><span class="line"><span class="keyword">u8_t</span> vision_Headerlength;<span class="comment">//版本号4首部长度4（length*4得字节单位）</span></span><br><span class="line"><span class="keyword">u8_t</span> servetype;<span class="comment">//服务类型8（3位优先域，4位服务类型，1位未用位置0；服务类型分别为：最小时延，最大吞吐量，最高可靠性，最小费用。这四位至多一位能被置1）</span></span><br><span class="line"><span class="keyword">u16_t</span> length;<span class="comment">//总长度16</span></span><br><span class="line"><span class="keyword">u16_t</span> identification;<span class="comment">//标识16（ID值，如果分片，用来确认是否为同一数据包）</span></span><br><span class="line"><span class="keyword">u16_t</span> flag_offset;<span class="comment">//标志位3（1位保留，2为不分片，3表示后面还有分片）偏移量13</span></span><br><span class="line"><span class="comment">//（如果数据包是一个分片包，该域指明了当前分片包应该位于数据包的什么位置上。该域的值单位为8字节）</span></span><br><span class="line"><span class="keyword">u8_t</span> liveTime;<span class="comment">//生存时间8</span></span><br><span class="line"><span class="keyword">u8_t</span> protocol;<span class="comment">//高层协议类型8</span></span><br><span class="line"><span class="keyword">u16_t</span> checksum = <span class="number">0</span>;<span class="comment">//首部检验和16（只对头部内容进行错误检测）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IP_address</span> <span class="title">srcIP</span>;</span><span class="comment">//源IP地址32</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IP_address</span> <span class="title">desIP</span>;</span><span class="comment">//目的IP地址32</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//计算校验和</span></span><br><span class="line"><span class="keyword">u16_t</span> caculateChecksum(<span class="keyword">void</span> *header, <span class="keyword">int</span> num,<span class="keyword">void</span> *pseudo=<span class="literal">NULL</span>,<span class="keyword">int</span> pnum=<span class="number">0</span>,<span class="keyword">u8_t</span> *data=<span class="literal">NULL</span>,<span class="keyword">int</span> dnum=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;<span class="comment">//32字节</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dnum % <span class="number">2</span>)flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num/<span class="number">2</span>; i++)</span><br><span class="line">&#123;result += *((<span class="keyword">u16_t</span>*)header + i);&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pnum / <span class="number">2</span>; i++)</span><br><span class="line">&#123;result += *((<span class="keyword">u16_t</span>*)pseudo + i);&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dnum / <span class="number">2</span> + flag; i++)</span><br><span class="line">&#123;result += *((<span class="keyword">u16_t</span>*)data + i);&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)result += *((<span class="keyword">u8_t</span>*)data + dnum - <span class="number">1</span>);</span><br><span class="line">result += result &gt;&gt; <span class="number">16</span>;</span><br><span class="line">result = result &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">result = result ^ <span class="number">0xFFFF</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造MAC帧头</span></span><br><span class="line"><span class="function">struct arpHeader <span class="title">buildARP</span><span class="params">(struct eth_header *eth_header)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">eth_header-&gt;type = htons(<span class="number">0x0806</span>);<span class="comment">//协议类型两个字节，必须要进行转换，而char类型只有一个字节，可以不进行转换。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arpHeader</span> <span class="title">arpHeader</span>;</span></span><br><span class="line"></span><br><span class="line">arpHeader.hard = htons(<span class="number">0x0001</span>);</span><br><span class="line">arpHeader.type = htons(<span class="number">0x0800</span>);</span><br><span class="line">arpHeader.macLen = <span class="number">6</span>;</span><br><span class="line">arpHeader.IPLen = <span class="number">4</span>;</span><br><span class="line">arpHeader.operation = htons(<span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line">arpHeader.srcMac = eth_header-&gt;sour_address;</span><br><span class="line"><span class="comment">//arpHeader.desMac=eth_header.dest_address;</span></span><br><span class="line">arpHeader.desMac = &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line">arpHeader.desIP = &#123; <span class="number">172</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">8</span> &#125;;<span class="comment">//目的端IP地址</span></span><br><span class="line">arpHeader.srcIP = &#123; <span class="number">10</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">141</span> &#125;;<span class="comment">//发送端IP地址</span></span><br><span class="line"><span class="keyword">return</span> arpHeader;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造IP帧头</span></span><br><span class="line"><span class="function">struct IPHeader <span class="title">buildIP</span><span class="params">(struct eth_header *eth_header,<span class="keyword">u8_t</span> protocol=<span class="number">0</span>,<span class="keyword">u8_t</span> dataLength=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">eth_header-&gt;type = htons(<span class="number">0x0800</span>);<span class="comment">//协议类型两个字节，必须要进行转换，而char类型只有一个字节，可以不进行转换。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IPHeader</span> <span class="title">ip</span>;</span></span><br><span class="line">ip.vision_Headerlength=<span class="number">0x45</span>;<span class="comment">//版本号4首部长度4（length*4得字节单位）0100 0101=45</span></span><br><span class="line">ip.servetype = <span class="number">0x00</span>;<span class="comment">//谢希仁说只有在使用区分服务时该字段才起作用</span></span><br><span class="line"><span class="comment">//服务类型8（3位优先域，4位服务类型，1位未用位置0；服务类型分别为：最小时延，最大吞吐量，最高可靠性，最小费用。这四位至多一位能被置1）</span></span><br><span class="line">ip.length = htons(<span class="number">20</span> + dataLength);<span class="comment">//总长度16</span></span><br><span class="line">ip.identification = htons(<span class="number">0x1218</span>);<span class="comment">//标识16（ID值，如果分片，用来确认是否为同一数据包）</span></span><br><span class="line">ip.flag_offset = htons(<span class="number">0x4000</span>);<span class="comment">//0100 0000 0000 0000标志位3（1位保留，2为不分片，3表示后面还有分片）偏移量13</span></span><br><span class="line"><span class="comment">//（如果数据包是一个分片包，该域指明了当前分片包应该位于数据包的什么位置上。该域的值单位为8字节）</span></span><br><span class="line">ip.liveTime=<span class="number">0xFF</span>;<span class="comment">//生存时间8</span></span><br><span class="line">ip.protocol = protocol;<span class="comment">//高层协议类型8</span></span><br><span class="line"><span class="comment">//校验和</span></span><br><span class="line">ip.srcIP = &#123; <span class="number">10</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">141</span> &#125;;<span class="comment">//源IP地址32</span></span><br><span class="line">ip.desIP = &#123; <span class="number">10</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">141</span> &#125;;<span class="comment">//目的IP地址32</span></span><br><span class="line">ip.checksum = caculateChecksum(&amp;ip, <span class="keyword">sizeof</span>(ip));<span class="comment">//首部检验和16（只对头部内容进行错误检测）</span></span><br><span class="line"><span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UDP数据帧头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UDPHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">/*UDP和TCP校验和：伪首部+首部8字节+数据</span></span><br><span class="line"><span class="comment">伪首部不参与传输，但是参加校验和的计算*/</span></span><br><span class="line"><span class="comment">/*伪首部：</span></span><br><span class="line"><span class="comment">32源IP</span></span><br><span class="line"><span class="comment">32目的IP</span></span><br><span class="line"><span class="comment">全08位协议16位UDP总长度*/</span></span><br><span class="line"><span class="keyword">u16_t</span> srcPort;<span class="comment">//源端口16,在需要对方回信时选用，不需要时可用全0</span></span><br><span class="line"><span class="keyword">u16_t</span> desPort;<span class="comment">//目的端口16</span></span><br><span class="line"><span class="keyword">u16_t</span> length;<span class="comment">//最小为8，仅有首部</span></span><br><span class="line"><span class="keyword">u16_t</span> checksum = <span class="number">0</span>;<span class="comment">//检验和16</span></span><br><span class="line"><span class="comment">//u8_t *data;//数据（必须进行填充使数据为16位倍数）</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//TCP数据帧头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCPHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//首部长度20～60字节</span></span><br><span class="line"><span class="keyword">u16_t</span> srcPort;<span class="comment">// 源端口16</span></span><br><span class="line"><span class="keyword">u16_t</span> desPort;<span class="comment">// 目的端口16</span></span><br><span class="line"><span class="keyword">u32_t</span> seqNumber;</span><br><span class="line"><span class="keyword">u32_t</span> ackNumber;</span><br><span class="line"><span class="keyword">u16_t</span> headerLength_reserved_control;</span><br><span class="line"><span class="keyword">u16_t</span> windowSize;</span><br><span class="line"><span class="keyword">u16_t</span> checksum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">u16_t</span> urgentPointer = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//伪首部</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pseudoHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">/*　 伪首部共有12字节，包含IP首部的一些字段，有如下信息：</span></span><br><span class="line"><span class="comment">32位源IP地址</span></span><br><span class="line"><span class="comment">32位目的IP地址</span></span><br><span class="line"><span class="comment">8位保留字节(置0)、8位传输层协议号(TCP是6，UDP是17)、16位TCP报文长度(TCP首部+数据)。*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IP_address</span> <span class="title">srcIP</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IP_address</span> <span class="title">desIP</span>;</span></span><br><span class="line"><span class="keyword">u8_t</span> reserve = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">u8_t</span> protocal;</span><br><span class="line"><span class="keyword">u16_t</span> totalLength;</span><br><span class="line">pseudoHeader(<span class="keyword">u8_t</span> pro, <span class="keyword">u16_t</span> headerLength, <span class="keyword">int</span> dataLength = <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">srcIP = &#123; <span class="number">10</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">141</span> &#125;;</span><br><span class="line">desIP = &#123; <span class="number">10</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">141</span> &#125;;</span><br><span class="line">protocal = pro;</span><br><span class="line">totalLength = htons(dataLength + headerLength);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造UDP帧头</span></span><br><span class="line"><span class="function">struct UDPHeader <span class="title">buildUDP</span><span class="params">(<span class="keyword">u8_t</span>* data = <span class="literal">NULL</span>, <span class="keyword">int</span> dataLength = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UDPHeader</span> <span class="title">UDP</span>;</span></span><br><span class="line">UDP.srcPort = htons(<span class="number">80</span>);</span><br><span class="line">UDP.desPort = htons(<span class="number">80</span>);</span><br><span class="line">UDP.length = htons(<span class="keyword">sizeof</span>(UDP) + dataLength);</span><br><span class="line">UDP.checksum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> UDP;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造TCP帧头</span></span><br><span class="line"><span class="function">struct TCPHeader <span class="title">buildTCP</span><span class="params">(<span class="keyword">u8_t</span>* data = <span class="literal">NULL</span>, <span class="keyword">int</span> dataLength = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCPHeader</span> <span class="title">TCP</span>;</span></span><br><span class="line">TCP.srcPort = htons(<span class="number">80</span>);</span><br><span class="line">TCP.desPort = htons(<span class="number">80</span>);</span><br><span class="line">TCP.seqNumber = htonl(<span class="number">0x16341218</span>);</span><br><span class="line">TCP.ackNumber = htonl(<span class="number">0x16341218</span>);</span><br><span class="line">TCP.headerLength_reserved_control = htons(<span class="number">0x5010</span>);<span class="comment">//0101 0000 0001 0000</span></span><br><span class="line">TCP.windowSize=htons(<span class="number">256</span>);</span><br><span class="line"><span class="function">struct pseudoHeader <span class="title">pseudo</span><span class="params">(<span class="number">6</span>, ((TCP.headerLength_reserved_control &amp; <span class="number">0x00F0</span>) &gt;&gt; <span class="number">4</span>) * <span class="number">4</span>, dataLength)</span></span>;</span><br><span class="line">TCP.checksum = caculateChecksum(&amp;TCP, <span class="keyword">sizeof</span>(TCP),</span><br><span class="line">&amp;pseudo, <span class="keyword">sizeof</span>(pseudo),</span><br><span class="line">data, dataLength);</span><br><span class="line"><span class="keyword">return</span> TCP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> choice = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> packetSize;</span><br><span class="line"><span class="keyword">u8_t</span> *packet = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">u8_t</span> data[] = &#123; <span class="number">0x41</span> ,<span class="number">0x42</span>,<span class="number">0x43</span> ,<span class="number">0x44</span> ,<span class="number">0x45</span> ,<span class="number">0x46</span> ,<span class="number">0x47</span> ,<span class="number">0x48</span> ,<span class="number">0x49</span> ,<span class="number">0x4A</span></span><br><span class="line">,<span class="number">0x4B</span> ,<span class="number">0x4C</span> ,<span class="number">0x4D</span> ,<span class="number">0x4E</span> ,<span class="number">0x4F</span> ,<span class="number">0x50</span> ,<span class="number">0x51</span> ,<span class="number">0x52</span> ,<span class="number">0x53</span> ,<span class="number">0x54</span></span><br><span class="line">,<span class="number">0x55</span> ,<span class="number">0x56</span> ,<span class="number">0x57</span> ,<span class="number">0x58</span> ,<span class="number">0x59</span> ,<span class="number">0x5A</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arpHeader</span> <span class="title">arp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IPHeader</span> <span class="title">IP</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">pcap_t</span> *fp;                         <span class="comment">//一个已打开的捕捉实例的描述符</span></span><br><span class="line"><span class="keyword">char</span> errbuf[PCAP_ERRBUF_SIZE];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pcap_if_t</span> *alldevs;                 <span class="comment">//网络接口列表的一项 </span></span><br><span class="line"><span class="keyword">pcap_if_t</span> *d;</span><br><span class="line"></span><br><span class="line">bpf_u_int32 net_mask;               <span class="comment">//掩码地址</span></span><br><span class="line">bpf_u_int32 net_ip;                 <span class="comment">//网络地址</span></span><br><span class="line"><span class="keyword">int</span> inum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">u8_t</span> *send_buff;                    <span class="comment">//待发送的数据包</span></span><br><span class="line"><span class="keyword">int</span> send_buff_len;</span><br><span class="line"><span class="keyword">int</span> packet_len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建以太网帧头结构并申请发送缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eth_header</span> <span class="title">eth_header</span>;</span>        <span class="comment">// 首部</span></span><br><span class="line"><span class="comment">//u8_t payload[] = "computer networks";// 数据</span></span><br><span class="line"><span class="keyword">u8_t</span> padding[<span class="number">46</span>];    <span class="comment">// 填充</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Retrieve the device list </span></span><br><span class="line"><span class="keyword">if</span> (pcap_findalldevs(&amp;alldevs, errbuf) == <span class="number">-1</span>)<span class="comment">//找到本机所有网卡，若未找到，报错退出</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error in pcap_findalldevs: %s\n"</span>, errbuf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the device list 打印设备列表</span></span><br><span class="line"><span class="keyword">for</span> (d = alldevs; d; d = d-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d. %s"</span>, ++i, d-&gt;name);</span><br><span class="line"><span class="keyword">if</span> (d-&gt;description)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" (%s)\n"</span>, d-&gt;description);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" (No description available)\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nNo interfaces found! Make sure WinPcap is installed.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Enter the interface number (1-%d):"</span>, i);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;inum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//若输入的网卡数不符合规范</span></span><br><span class="line"><span class="keyword">if</span> (inum &lt; <span class="number">1</span> || inum &gt; i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nInterface number out of range.\n"</span>);</span><br><span class="line"><span class="comment">// Free the device list </span></span><br><span class="line">pcap_freealldevs(alldevs);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Jump to the selected adapter 将网卡定位到输入的位置</span></span><br><span class="line"><span class="keyword">for</span> (d = alldevs, i = <span class="number">0</span>; i &lt; inum - <span class="number">1</span>; d = d-&gt;next, i++);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取选定网卡信息：网络地址和掩码地址 </span></span><br><span class="line">pcap_lookupnet(d-&gt;name, &amp;net_ip, &amp;net_mask, errbuf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open the adapter  打开网卡，之后可直接用fp使用该网卡。</span></span><br><span class="line"><span class="keyword">if</span> ((fp = pcap_open_live(d-&gt;name,<span class="comment">//设备名name of the device</span></span><br><span class="line"><span class="number">65536</span>,<span class="comment">// 抓包的长度portion of the packet to capture. It doesn't matter in this case </span></span><br><span class="line"><span class="number">1</span>,<span class="comment">// 混杂模式promiscuous mode (nonzero means promiscuous)正常的值为0，不是给我的包我不要</span></span><br><span class="line"><span class="number">1000</span>,<span class="comment">// 生存时间read timeout</span></span><br><span class="line">errbuf<span class="comment">// error buffer</span></span><br><span class="line">)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nUnable to open the adapter. %s is not supported by WinPcap\n"</span>, d-&gt;name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造以太网帧头，目的MAC地址为广播地址、源MAC地址为本接口MAC地址</span></span><br><span class="line"><span class="comment">//协议类型为TYPE_LENGTH所定义的类型值</span></span><br><span class="line">eth_header.dest_address = &#123; <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span> &#125;;</span><br><span class="line">eth_header.sour_address = &#123; <span class="number">0x60</span>, <span class="number">0xF6</span>, <span class="number">0x77</span>, <span class="number">0x96</span>, <span class="number">0x1E</span>, <span class="number">0x96</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入需要发送的数据包类型所对应的序号：\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0、结束输入\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1、ARP报文\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2、IP报文\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3、TCP报文\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"4、UDP报文\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (choice != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">"%c"</span>, &amp;choice);</span><br><span class="line"><span class="keyword">if</span> (choice == <span class="string">'0'</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (choice == <span class="string">'\n'</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:<span class="comment">//ARP</span></span><br><span class="line">packetSize = <span class="keyword">sizeof</span>(struct arpHeader);</span><br><span class="line"><span class="keyword">if</span> (packet != <span class="literal">NULL</span>)<span class="built_in">free</span>(packet);</span><br><span class="line"><span class="keyword">if</span> ((packet = (<span class="keyword">u8_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct arpHeader))) == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">"分配空间失败，未成功创建报文\n"</span>); &#125;</span><br><span class="line"><span class="built_in">memcpy</span>(packet, &amp;buildARP(&amp;eth_header), packetSize);<span class="comment">//内存拷贝，拷到哪，从哪拷，拷多少</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:<span class="comment">//IP</span></span><br><span class="line">packetSize = <span class="keyword">sizeof</span>(struct IPHeader);</span><br><span class="line"><span class="keyword">if</span> (packet != <span class="literal">NULL</span>)<span class="built_in">free</span>(packet);</span><br><span class="line"><span class="keyword">if</span> ((packet = (<span class="keyword">u8_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct IPHeader))) == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">"分配空间失败，未成功创建报文\n"</span>); &#125;</span><br><span class="line"><span class="built_in">memcpy</span>(packet, &amp;buildIP(&amp;eth_header), packetSize);<span class="comment">//内存拷贝，拷到哪，从哪拷，拷多少</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'3'</span>:<span class="comment">//TCP</span></span><br><span class="line">packetSize = <span class="keyword">sizeof</span>(struct IPHeader) + <span class="keyword">sizeof</span>(struct TCPHeader) + <span class="keyword">sizeof</span>(data);</span><br><span class="line"><span class="keyword">if</span> (packet != <span class="literal">NULL</span>)<span class="built_in">free</span>(packet);</span><br><span class="line"><span class="keyword">if</span> ((packet = (<span class="keyword">u8_t</span> *)<span class="built_in">malloc</span>(packetSize)) == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">"分配空间失败，未成功创建报文\n"</span>); &#125;</span><br><span class="line"><span class="built_in">memcpy</span>(packet, &amp;buildIP(&amp;eth_header, <span class="number">6</span>, <span class="keyword">sizeof</span>(struct TCPHeader) + <span class="keyword">sizeof</span>(data)), <span class="keyword">sizeof</span>(struct IPHeader));<span class="comment">//首先构造IP</span></span><br><span class="line"><span class="built_in">memcpy</span>(packet + <span class="keyword">sizeof</span>(struct IPHeader), &amp;buildTCP(data, <span class="keyword">sizeof</span>(data)), <span class="keyword">sizeof</span>(struct TCPHeader));<span class="comment">//然后构造TCP</span></span><br><span class="line"><span class="built_in">memcpy</span>(packet + <span class="keyword">sizeof</span>(struct IPHeader) + <span class="keyword">sizeof</span>(struct TCPHeader), &amp;data, <span class="keyword">sizeof</span>(data));<span class="comment">//最后加上数据</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'4'</span>:<span class="comment">//UDP</span></span><br><span class="line">packetSize = <span class="keyword">sizeof</span>(struct IPHeader)+<span class="keyword">sizeof</span>(struct UDPHeader)+<span class="keyword">sizeof</span>(data);</span><br><span class="line"><span class="keyword">if</span> (packet != <span class="literal">NULL</span>)<span class="built_in">free</span>(packet);</span><br><span class="line"><span class="keyword">if</span> ((packet = (<span class="keyword">u8_t</span> *)<span class="built_in">malloc</span>(packetSize)) == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">"分配空间失败，未成功创建报文\n"</span>); &#125;</span><br><span class="line"><span class="built_in">memcpy</span>(packet, &amp;buildIP(&amp;eth_header,<span class="number">17</span>,<span class="keyword">sizeof</span>(struct UDPHeader)+<span class="keyword">sizeof</span>(data)), <span class="keyword">sizeof</span>(struct IPHeader));<span class="comment">//内存拷贝，拷到哪，从哪拷，拷多少</span></span><br><span class="line"><span class="built_in">memcpy</span>(packet + <span class="keyword">sizeof</span>(struct IPHeader), &amp;buildUDP(), <span class="keyword">sizeof</span>(struct UDPHeader));</span><br><span class="line"><span class="built_in">memcpy</span>(packet + <span class="keyword">sizeof</span>(struct IPHeader) + <span class="keyword">sizeof</span>(struct UDPHeader), &amp;data, <span class="keyword">sizeof</span>(data));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"输入错误，请重新输入！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//申请发送缓冲区，用于存储待发送的数据包</span></span><br><span class="line">packet_len = <span class="keyword">sizeof</span>(struct eth_header) + packetSize;<span class="comment">//确定数据包，知道该申请多大的缓冲区</span></span><br><span class="line">send_buff_len = packetSize &gt; <span class="number">46</span> ? packet_len : <span class="keyword">sizeof</span>(struct eth_header) + <span class="number">46</span>;  <span class="comment">//保证数据包的最小长度</span></span><br><span class="line">send_buff = (<span class="keyword">u8_t</span> *)<span class="built_in">malloc</span>(send_buff_len);<span class="comment">//申请内存空间,并强制类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将以太网帧头结构和负载拷贝到发送缓冲区中</span></span><br><span class="line"><span class="built_in">memcpy</span>(send_buff, &amp;eth_header, <span class="keyword">sizeof</span>(struct eth_header));<span class="comment">//内存拷贝，拷到哪，从哪拷，拷多少</span></span><br><span class="line"><span class="built_in">memcpy</span>(send_buff + <span class="keyword">sizeof</span>(struct eth_header), packet, packetSize);<span class="comment">//内存拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充以太帧至最短长度46字节</span></span><br><span class="line"><span class="keyword">if</span> (packet_len &lt; send_buff_len) &#123;</span><br><span class="line"><span class="built_in">memset</span>(padding, <span class="number">0</span>, send_buff_len - packet_len);<span class="comment">//padding为填充数组</span></span><br><span class="line"><span class="comment">//void *memset(void *s, int ch, size_t n);</span></span><br><span class="line"><span class="comment">//函数解释:将s中当前位置后面的n个字节 (typedef unsigned int size_t )用 ch 替换并返回 s 。</span></span><br><span class="line"><span class="built_in">memcpy</span>(send_buff + packet_len, padding, send_buff_len - packet_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send down the packet </span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)  <span class="comment">// 为了便于捕获，发送十次</span></span><br><span class="line"><span class="keyword">if</span> (pcap_sendpacket(fp,  <span class="comment">// Adapter,所使用的网卡</span></span><br><span class="line">send_buff, <span class="comment">// buffer with the packet,存储数据包的缓冲区</span></span><br><span class="line">send_buff_len       <span class="comment">// 首部加数据长度，尾部由系统自动添加</span></span><br><span class="line">) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nError sending the packet: %s\n"</span>, pcap_geterr(fp));</span><br><span class="line"><span class="keyword">return</span> <span class="number">-5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"报文已成功发送！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">pcap_close(fp);<span class="comment">//关闭网卡</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="计算机网络" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>2019/4/14百度C++/PHP实习生面试</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/21/2019-4-14%E7%99%BE%E5%BA%A6C-PHP%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/21/2019-4-14百度C-PHP实习生面试/</id>
    <published>2019-04-21T10:26:46.000Z</published>
    <updated>2019-04-26T14:47:20.683Z</updated>
    
    <content type="html"><![CDATA[<p>vector拷贝构造函数<br>STL的基本容器类型<br>set和map的内部实现，两者的区别<br>网络三次握手ACK和SYN<br>TCP和UDP的区别<br>一对一无连接有连接<br>编译链接执行，每一步做了什么，会出什么错误<br>运算符重载前自加和后自加的区别（&amp;的位置）<br>引用和指针的区别<br>虚函数，纯虚函数，可不可以实现，实例化，继承<br>类成员变量进行初始化的顺序是与定义顺序相同的，析构相反<br>重写和重载的区别<br>常用的排序算法有哪些，时间和空间复杂度各是怎么样的<br>TCP的拥塞控制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vector拷贝构造函数&lt;br&gt;STL的基本容器类型&lt;br&gt;set和map的内部实现，两者的区别&lt;br&gt;网络三次握手ACK和SYN&lt;br&gt;TCP和UDP的区别&lt;br&gt;一对一无连接有连接&lt;br&gt;编译链接执行，每一步做了什么，会出什么错误&lt;br&gt;运算符重载前自加和后自加的区别（
      
    
    </summary>
    
      <category term="面试" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建博客之路</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/21/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/21/搭建博客之路/</id>
    <published>2019-04-21T05:23:12.000Z</published>
    <updated>2019-05-07T06:36:20.897Z</updated>
    
    <content type="html"><![CDATA[<p>$ git config –global user.name “Luojingyi”</p><p>$ git config –global user.email “<a href="mailto:295579587@qq.com" target="_blank" rel="noopener">295579587@qq.com</a>“</p><p>$ npm install hexo-cli -g</p><p>$ hexo init<br>$ hexo install<br>$ npm install hexo-deployer-git –save #装插件</p><p>打开_config.yml文件，进行如下更改：</p><p>type: git<br>repo: <a href="https://github.com/WatsonLuo/WatsonLuo.github.io.git">https://github.com/WatsonLuo/WatsonLuo.github.io.git</a><br>branch: master</p><p>$ hexo g -d #发布</p><p><em>config.yml文件需要将uml改为下述地址，否则主题无法加载。</em><br><a href="https://watsonluo.github.io/" target="_blank" rel="noopener">https://watsonluo.github.io/</a></p><blockquote><p>以下为hexo指令说明：</p></blockquote><p>init<br>$ hexo init [folder]<br>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><p>new<br>$ hexo new [layout] <title><br>新建一篇文章。<br>如果没有设置 layout 的话，默认使用 _config.yml中的default_layout参数代替。_<br>如果标题包含空格的话，请使用引号括起来。</title></p><p>$ hexo new “post title with whitespace”<br>generate<br>$ hexo generate<br>生成静态文件。</p><p>选项    描述<br>-d, –deploy    文件生成后立即部署网站<br>-w, –watch    监视文件变动<br>该命令可以简写为</p><p>$ hexo g<br>publish<br>$ hexo publish [layout] <filename><br>发表草稿。</filename></p><p>server<br>$ hexo server<br>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></p><p>选项    描述<br>-p, –port    重设端口<br>-s, –static    只使用静态文件<br>-l, –log    启动日记记录，使用覆盖记录格式<br>deploy<br>$ hexo deploy<br>部署网站。</p><p>参数    描述<br>-g, –generate    部署之前预先生成静态文件<br>该命令可以简写为：</p><p>$ hexo d<br>render<br>$ hexo render <file1> [file2] …<br>渲染文件。</file1></p><p>参数    描述<br>-o, –output    设置输出路径<br>migrate<br>$ hexo migrate <type><br>从其他博客系统 迁移内容。</type></p><p>clean<br>$ hexo clean<br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>list<br>$ hexo list <type><br>列出网站资料。</type></p><p>version<br>$ hexo version<br>显示 Hexo 版本。</p><p>选项<br>安全模式<br>$ hexo –safe<br>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><p>调试模式<br>$ hexo –debug<br>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p><p>简洁模式<br>$ hexo –silent<br>隐藏终端信息。</p><p>自定义配置文件的路径<br>$ hexo –config custom.yml<br>自定义配置文件的路径，执行后将不再使用 <em>config.yml。</em></p><p>显示草稿<br>$ hexo –draft<br>显示 source/<em>drafts 文件夹中的草稿文章。</em></p><p>自定义 CWD<br>$ hexo –cwd /path/to/cwd<br>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;$ git config –global user.name “Luojingyi”&lt;/p&gt;
&lt;p&gt;$ git config –global user.email “&lt;a href=&quot;mailto:295579587@qq.com&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="博客" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://github.com/WatsonLuo/WatsonLuo.github.io.git/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/20/hello-world/"/>
    <id>https://github.com/WatsonLuo/WatsonLuo.github.io.git/2019/04/20/hello-world/</id>
    <published>2019-04-20T13:13:00.986Z</published>
    <updated>2019-04-20T13:13:00.990Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
